* Constants

#+srcname: platform-id
#+begin_src emacs-lisp

(defconst emacs-step (string-match "*apple-appkit" (emacs-version))  "non-nil iff Emacs.app, nil otherwise")

#+end_src

* Load path

#+srcname: load-paths
#+begin_src emacs-lisp 

(add-to-list 'load-path "~/.emacs.d/site-lisp/")

#+end_src

* Package init

#+srcname package-init
#+begin_src emacs-lisp

(when (>= emacs-major-version 24)
  (package-initialize)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/")))

#+end_src

* Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: load-on-startup
#+begin_src emacs-lisp 

#+end_src

* Custom variables

#+srcname: custom-set-variables
#+begin_src emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(background-color "#042028")
 '(background-mode dark)
 '(column-number-mode t)
 '(cursor-color "#708183")
 '(custom-enabled-themes (quote (solarized-dark)))
 '(custom-safe-themes (quote ("54d1bcf3fcf758af4812f98eb53b5d767f897442753e1aa468cfeb221f8734f9" "baed08a10ff9393ce578c3ea3e8fd4f8c86e595463a882c55f3bd617df7e5a45" "485737acc3bedc0318a567f1c0f5e7ed2dfde3fb" "1440d751f5ef51f9245f8910113daee99848e2c0" "5600dc0bb4a2b72a613175da54edb4ad770105aa" "0174d99a8f1fdc506fa54403317072982656f127" default)))
 '(exec-path (quote ("/usr/bin" "/bin" "/usr/local/bin" "/usr/sbin" "/sbin" "/Users/bosmacs/Applications/Emacs.app/Contents/MacOS/bin" "/opt/local/bin")))
 '(foreground-color "#708183")
 '(fringe-mode 0 nil (fringe))
 '(global-hl-line-mode t)
 '(inhibit-startup-screen t)
 '(paren-match-face (quote paren-face-match-light))
 '(paren-sexp-mode t)
 '(remote-shell-program "/usr/bin/ssh")
 '(ring-bell-function (quote ignore) t)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(scroll-bar-mode nil))

#+end_src

* Default theme

#+srcname: default-theme
#+begin_src emacs-lisp

; make dark theme when running in terminal
(when (null (display-graphic-p))
            (custom-set-variables
             '(custom-enabled-themes (quote (solarized-dark)))))

#+end_src

* Key bindings
#+begin_src emacs-lisp
;; indent on ret/newline
(define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src
* Org
** Babel
*** Appearance
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src
*** Activate languages
#+begin_src emacs-lisp
(when (>= emacs-major-version 23)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (perl . t)
     (emacs-lisp . t)
     (ruby . t)
     (latex . t)
     (octave . t)
     ;;(c . t)
     ;;(cpp . t)
     (clojure . t)
     (haskell . t)
     (python . t)
     (dot . t)
     )))

(setq org-confirm-babel-evaluate nil)
#+end_src
* Formatting
#+begin_src emacs-lisp

;; only spaces (no tabs)
(setq-default indent-tabs-mode nil)

;; auto-indent on yank
(defadvice yank (after indent-region activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                                               c-mode c++-mode objc-mode
                                               latex-mode plain-tex-mode))
          (let ((mark-even-if-inactive t))
            (indent-region (region-beginning) (region-end) nil))))

(defadvice yank-pop (after indent-region activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                                               c-mode c++-mode objc-mode
                                               latex-mode plain-tex-mode))
          (let ((mark-even-if-inactive t))
            (indent-region (region-beginning) (region-end) nil))))

;; remove indentation when killing end of line
(defadvice kill-line (before check-position activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                               c-mode c++-mode objc-mode
                               latex-mode plain-tex-mode))
          (if (and (eolp) (not (bolp)))
              (progn (forward-char 1)
              (just-one-space 0)
              (backward-char 1)))))

#+end_src
* Modes
** C
#+begin_src emacs-lisp

;; c indent level
(setq c-basic-offset 4)

#+end_src
** CCL
#+begin_src emacs-lisp
(setq inferior-lisp-program "ccl")
#+end_src
** iswitchb
#+begin_src emacs-lisp
(iswitchb-mode t)
#+end_src
* Hooks
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'c-mode-common-hook
               (lambda () (subword-mode 1)))
#+end_src
