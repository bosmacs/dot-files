#+PROPERTY: header-args:emacs-lisp :results silent

* Constants

#+srcname: platform-id
#+begin_src emacs-lisp
(defconst emacs-step (string-match "*apple-appkit" (emacs-version))  "non-nil iff Emacs.app, nil otherwise")
#+end_src

* Load path

#+srcname: load-paths
#+begin_src emacs-lisp 
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
#+end_src

#+BEGIN_SRC emacs-lisp
;;(when (memq window-system '(mac ns))
;;  (exec-path-from-shell-initialize))
#+END_SRC

* use-package
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure nil)
#+end_src
* Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: load-on-startup
#+begin_src emacs-lisp 

#+end_src

* Custom variables

#+srcname: custom-set-variables
#+begin_src emacs-lisp :exports none
(setq ns-use-srgb-colorspace t)

(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1))
  (menu-bar-mode -1))

(setq-default fill-column 100)

(setq auto-hscroll-mode 'current-line)

;; don't default to two spaces after period
(setq sentence-end-double-space nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(background-color "#042028")
 '(background-mode dark)
 '(column-number-mode t)
 '(cursor-color "#708183")
 '(custom-safe-themes (quote ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d2622a2a2966905a5237b54f35996ca6fda2f79a9253d44793cfe31079e3c92b" "501caa208affa1145ccbb4b74b6cd66c3091e41c5bb66c677feda9def5eab19c" "54d1bcf3fcf758af4812f98eb53b5d767f897442753e1aa468cfeb221f8734f9" "baed08a10ff9393ce578c3ea3e8fd4f8c86e595463a882c55f3bd617df7e5a45" "485737acc3bedc0318a567f1c0f5e7ed2dfde3fb" "1440d751f5ef51f9245f8910113daee99848e2c0" "5600dc0bb4a2b72a613175da54edb4ad770105aa" "0174d99a8f1fdc506fa54403317072982656f127" default)))
;; '(exec-path (quote ("/usr/bin" "/bin" "/usr/local/bin" "/usr/sbin" "/sbin" "/Users/bosmacs/Applications/Emacs.app/Contents/MacOS/bin" "/opt/local/bin" "/usr/texbin")))
 '(foreground-color "#708183")
;; '(fringe-mode 0 nil (fringe))
 '(global-hl-line-mode t)
 '(inhibit-startup-screen t)
 '(paren-match-face (quote paren-face-match-light))
 '(paren-sexp-mode t)
 '(remote-shell-program "/usr/bin/ssh")
 '(ring-bell-function (quote ignore) t)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(scroll-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(which-func ((t (:inherit font-lock-constant-face)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent :exports code
;;(set-frame-font "Consolas-13")
;;(set-frame-font "JetBrains Mono-15")
;;(add-to-list 'default-frame-alist '(ns-transparent-titlebar . f))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent :exports code
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:foreground "#002b36"))))
 '(which-func ((t (:inherit font-lock-constant-face)))))


;; make line wrapping bitmaps less obnoxious
;; (define-fringe-bitmap 'right-curly-arrow
;;   [#b00000000
;;    #b00000000
;;    #b00000000
;;    #b00000000
;;    #b01110000
;;    #b00010000
;;    #b00010000
;;    #b00000000])
;; (define-fringe-bitmap 'left-curly-arrow
;;   [#b00000000
;;    #b00001000
;;    #b00001000
;;    #b00001110
;;    #b00000000
;;    #b00000000
;;    #b00000000
;;    #b00000000])

;; (mapcar (lambda(fb) (set-fringe-bitmap-face fb 'org-hide)) fringe-bitmaps)

;; (setq fringe-indicator-alist '((truncation left-arrow right-arrow)
;;                                ;; (continuation left-curly-arrow right-curly-arrow)
;;                                (continuation nil nil)             
;;                                (overlay-arrow . right-triangle)
;;                                (up . up-arrow)
;;                                (down . down-arrow)
;;                                (top top-left-angle top-right-angle)
;;                                (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
;;                                (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
;;                                (empty-line . empty-line)
;;                                (unknown . question-mark)))
#+END_SRC


#+begin_src emacs-lisp
;; for mitsuhara emacs
;;(setq mac-option-key-is-meta t)
;;(setq mac-command-key-is-meta nil)
(setq mac-command-modifier 'super)
(setq mac-option-modifier 'meta)

(global-set-key [(super a)] 'mark-whole-buffer)
(global-set-key [(super v)] 'yank)
(global-set-key [(super c)] 'kill-ring-save)
(global-set-key [(super s)] 'save-buffer)
(global-set-key [(super l)] 'goto-line)
(global-set-key [(super w)]
                (lambda () (interactive) (delete-window)))
(global-set-key [(super z)] 'undo)
(global-set-key [(super q)] 'save-buffers-kill-terminal)
#+end_src

* Sessions
#+BEGIN_SRC emacs-lisp

;; Automatically save and restore sessions
(setq desktop-dirname             "~/.emacs.d/" ;; "desktop/"
      desktop-base-file-name      "emacs.desktop"
      desktop-base-lock-name      "emacs.desktop.lock"
      desktop-path                (list desktop-dirname)
      desktop-save                t
      ;;desktop-files-not-to-save   "^$" ;reload tramp paths
      desktop-load-locked-desktop nil)

;; enable desktop mode in non-terminal windows
(if window-system
    (desktop-save-mode t))

;; increase GC threshold
(setq gc-cons-threshold 20000000)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

#+end_src

* Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :config
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

* Default theme

#+srcname: default-theme
#+begin_src emacs-lisp
  ;; make the modeline high contrast

  (setq x-underline-at-descent-line t)
  ;;
  (if window-system
      (progn
        (setq solarized-high-contrast-mode-line nil))
    (progn
      (setq solarized-high-contrast-mode-line t))) 

  ;; make dark theme when running in terminal
  ;;(if (display-graphic-p)
  ;;            (custom-set-variables
  ;;             '(custom-enabled-themes (quote (solarized-dark)))

  ;; trying modus
  ;; (use-package solarized-theme
  ;;   :init
  ;;   ;;(if window-system
  ;;     ;;(load-theme 'solarized-light t)
  ;;  (load-theme 'solarized-dark t))
  ;;(set-face-attribute 'mode-line nil
  ;;                    :box '(:line-width 2 :color "#173541")) ;; 96a1a1

  (use-package emacs
    :init
    ;; ;; Add all your customizations prior to loading the themes
    ;; (setq modus-themes-italic-constructs t
    ;;       modus-themes-bold-constructs t
    ;;       modus-themes-variable-pitch-ui nil
    ;;       modus-themes-fringes nil ; {nil,'subtle,'intense}
    ;;       ;; Options for `modus-themes-mode-line' are either nil, or a list
    ;;       ;; that can combine any of `3d' OR `moody', `borderless',
    ;;       ;; `accented', a natural number for extra padding (or a cons cell
    ;;       ;; of padding and NATNUM), and a floating point for the height of
    ;;       ;; the text relative to the base font size (or a cons cell of
    ;;       ;; height and FLOAT)
    ;;       modus-themes-mode-line '(3d (padding . 4) (height . 0.9))  ;; (accented borderless)
    ;;       modus-themes-region '(bg-only no-extend))
    ;; :config
    ;; ;; Load the theme of your choice:
    ;; (load-theme 'modus-vivendi) ;; OR (load-theme 'modus-vivendi)
    ;; ;;:bind ("<f5>" . modus-themes-toggle)
    :config
    (add-hook 'server-after-make-frame ;;after-make-frame-functions
              (lambda ()
                ;; we do something only in terminal Emacs
                (unless (display-graphic-p)
                  (xterm-mouse-mode 1))))
    (add-hook 'after-init-hook
              (lambda ()
                ;; we do something only in terminal Emacs
                (unless (display-graphic-p)
                  (xterm-mouse-mode 1))))
    )                                     

  (use-package modus-themes
    :init
    ;; customize prior to load
    (setq modus-themes-italic-constructs nil
          modus-themes-bold-constructs t
          modus-themes-variable-pitch-ui nil
          modus-themes-fringes nil
          modus-themes-mode-line '(3d (padding . 4) (height . 0.9))
          modus-themes-region '(bg-only no-extend)
          )


    (setq modus-themes-common-palette-overrides
          '((fringe unspecified)
            (bg-region bg-cyan-intense)
            ;;(bg-completion bg-cyan-subtle)
            (bg-completion bg-hl-line)    ;; https://protesilaos.com/emacs/modus-themes#h:d959f789-0517-4636-8780-18123f936f91
            ;;(bg-completion bg-cyan-nuanced)
            (bg-hover bg-yellow-intense)
            (bg-hovery-secondary bg-magenta-intense)
            (bg-mode-line-active bg-blue-subtle)
            (fg-mode-line-active fg-main)          
            (border-mode-line-active bg-blue-subtle) ;;blue-intense)
            (fg-prompt blue-intense)
          ))

    :config
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame) (with-selected-frame frame
                                    (load-theme 'modus-vivendi t))))
      (load-theme 'modus-vivendi t))
    )

  (add-to-list 'default-frame-alist '(ns-appearance . dark))


  ;; temporary workaround for solarized's problems
  ;;(custom-set-faces (if (not window-system) '(default ((t (:background "nil"))))))
  ;;(custom-set-faces (if (not window-system) '(font-lock-keyword-face ((t (:background "nil"))))))
  ;;(custom-set-faces (if (not window-system) '(helm-ff-file ((t (:background "nil"))))))
  ;;(custom-set-faces (if (not window-system) '(helm-ff-directory ((t (:background "nil"))))))

  ;;(set-face-attribute 'mode-line nil :box '(:line-width 0 :color "#eee8d5"))
  ;;(set-face-attribute 'mode-line-inactive nil :box '(:line-width 0 :color "#fdf6e3"))

#+end_src

* Key bindings
#+begin_src emacs-lisp
;; indent on ret/newline
(define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src
* Magit
Bind magit keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Tie diff-hl to magit refresh. Necessary for Magit >= 2.4
#+BEGIN_SRC emacs-lisp
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+END_SRC
* Org
** tempo
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
#+END_SRC
** Bullets
Display pretty (unicode) bullets instead of asterisks.
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Babel
*** Appearance
#+begin_src emacs-lisp
;; enable syntax highlighing in src blocks
(setq org-src-fontify-natively t)

;; customize scientific notation display in tables
(setq org-latex-table-scientific-notation "%se%s")

;; enable listings packages for src code export
;; (setq org-latex-listings t)

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
(add-hook 'org-mode-hook 'org-display-inline-images)

;; edit code in same window
(setq org-src-window-setup 'current-window)

;; if there is a #+ATTR.*: width="200", resize to 200, otherwise use the value below
(setq org-image-actual-width '(700))
#+end_src

*** Activate languages
#+begin_src emacs-lisp
;;(require 'ob-mathematica)

;; julia location
(use-package ess :demand
:init
(require 'ess-site)
(setq inferior-julia-program-name "/opt/local/bin/julia"))

(when (>= emacs-major-version 23)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;;(R . t)
     ;;(sh . t)
     (perl . t)
     (emacs-lisp . t)
     (ruby . t)
     (latex . t)
     (octave . t)
     (C . t)
     ;;(cpp . t)
     (fortran . t)
     (clojure . t)
     (haskell . t)
     (python . t)
     (dot . t)
     ;;(mathematica . t)
     ;;(julia . t)
     ;;(swift . t)
     )))

;; MATLAB location
(setq matlab-shell-command "/Applications/MATLAB_R2015b.app/bin/matlab")
(setq org-babel-matlab-shell-command "/Applications/MATLAB_R2015b.app/bin/matlab -nosplash -nodisplay")
(setq matlab-shell-command-switches '("-nosplash" "-nodisplay"))

;; set default compiler
(setq org-babel-C-compiler "icc")
(setq org-babel-C++-compiler "clang++")

;; don't ask for confirmation before running code
(setq org-confirm-babel-evaluate nil)

;; preserve whitespace
(setq org-src-preserve-indentation t)

;; export code as listings
(setq org-export-latex-listings t)

;; required
(add-to-list 'org-latex-packages-alist '("" "hyperref"))
;; customize latex packages for syntax highlighting
;;(require 'ox-latex)
;;(add-to-list 'org-latex-packages-alist '("" "listings"))
;;(add-to-list 'org-latex-packages-alist '("" "color"))     

;; turn cdlatex mode on by default
(use-package cdlatex)
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

;; enable alphabetical lists in outline
(setq org-alphabetical-lists t)

;; use smart punctuation by default
(setq org-export-with-smart-quotes t)

(require 'ox-latex)

(add-to-list 'org-latex-classes
          '("tufte-book"
             "\\documentclass{tufte-book}
             [PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
          '("tufte-handout"
             "\\documentclass{tufte-handout}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


#+end_src

** impress.js
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/site-lisp/org-impress-js.el")
;;(require 'ox-impress-js)

(setq org-export-html-style-include-scripts nil
       org-export-html-style-include-default nil)
#+END_SRC

** LaTeX Export
#+BEGIN_SRC emacs-lisp
;; taken from https://github.com/kjhealy/emacs-starter-kit/blob/master/kjhealy.org

;; Choose either listings or minted for exporting source code blocks.
;; Using minted (as here) requires pygments be installed. To use the
;; default listings package instead, use
;; (setq org-latex-listings t)
;; and change references to "minted" below to "listings"
(setq org-latex-listings 'minted)

;; default settings for minted code blocks.
;; bg will need to be defined in the preamble of your document. It's defined in  org-preamble-xelatex.sty below.
(setq org-latex-minted-options
      '(;("frame" "single")
        ;("bgcolor" "bg") 
        ("fontsize" "\\small")
        ))


;; note the insertion of the \input statement for the vc information 
(add-to-list 'org-latex-classes
             '("memarticle"
               "\\documentclass[11pt,oneside,article]{memoir}\n\\input{vc} % vc package"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("membook"
               "\\documentclass[11pt,oneside]{memoir}\n\\input{vc} % vc package"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

;; LaTeX compilation command. For orgmode docs we just always use xelatex for convenience.
;; You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
;;(setq org-latex-pdf-process '("latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))
(setq org-latex-pdf-process '("latexmk -xelatex -shell-escape -pdf -f %f"))

;; Default packages included in the tex file. As before, org-preamble-xelatex is part of latex-custom-kjh.
;; There's org-preamble-pdflatex as well, if you wish to use that instead.
(setq org-latex-default-packages-alist nil)     

;;(setq org-latex-packages-alist
;;      '(;("minted" "org-preamble-xelatex" t)
;;        ("" "graphicx" t)
;;        ("" "longtable" nil)
;;        ("" "float" )))

#+END_SRC
* Formatting
#+begin_src emacs-lisp

;; only spaces (no tabs)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq c-default-style "k&r")

;; auto-indent on yank
(defadvice yank (after indent-region activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                                               c-mode c++-mode objc-mode
                                               latex-mode plain-tex-mode))
          (let ((mark-even-if-inactive t))
            (indent-region (region-beginning) (region-end) nil))))

(defadvice yank-pop (after indent-region activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                                               c-mode c++-mode objc-mode
                                               latex-mode plain-tex-mode))
          (let ((mark-even-if-inactive t))
            (indent-region (region-beginning) (region-end) nil))))

;; remove indentation when killing end of line
(defadvice kill-line (before check-position activate)
      (if (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode
                               c-mode c++-mode objc-mode
                               latex-mode plain-tex-mode))
          (if (and (eolp) (not (bolp)))
              (progn (forward-char 1)
              (just-one-space 0)
              (backward-char 1)))))

#+end_src
* Modes
** General
#+BEGIN_SRC emacs-lisp
;;(electric-pair-mode 1)
#+END_SRC
** Cider
#+BEGIN_SRC elisp
(defun replace-defun-comment (buffer value)
  (with-current-buffer buffer
    (save-excursion
      (save-match-data
        (end-of-defun)
        (backward-char)
        (comment-kill nil)
        (just-one-space 0)
        (insert " ; => ")
        (insert value)))))

(defun cider-insert-defun-comment-eval-handler (buffer)
  (nrepl-make-response-handler
   buffer
   (lambda (buffer value)
     (replace-defun-comment buffer value))
   (lambda (_buffer out)
     (cider-emit-interactive-eval-output out))
   (lambda (_buffer err)
     (cider-emit-interactive-eval-output err))
   nil))

(defun cider-eval-defun-at-point-and-insert-as-comment ()
  (interactive)
  (cider-eval (cider-defun-at-point)
              (cider-insert-defun-comment-eval-handler (current-buffer))
              (cider-current-ns)))

(add-hook
 'cider-mode-hook
 (lambda ()
   (local-set-key (kbd "S-C-M-x")
                  #'cider-eval-defun-at-point-and-insert-as-comment)))
#+END_SRC

#+RESULTS:
| lambda | nil | (local-set-key (kbd S-C-M-x) (function cider-eval-defun-at-point-and-insert-as-comment)) |

** C
#+begin_src emacs-lisp

;; c indent level
(setq c-basic-offset 4)

#+end_src
** CCL
#+begin_src emacs-lisp
(setq inferior-lisp-program "ccl")
#+end_src
** diff-hl
#+BEGIN_SRC emacs-lisp
;; (fringe-mode nil) ;; default fringe
(use-package diff-hl
  :init 
  (global-diff-hl-mode t))
#+END_SRC

** iswitchb
#+begin_src emacs-lisp
;; (iswitchb-mode t) ;; deprecated
;; (icomplete-mode t)
#+end_src
** which-function
#+begin_src emacs-lisp
(which-function-mode t)
#+end_src

** eshell
#+begin_src emacs-lisp
;; http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)
#+end_src
** smartparens
#+begin_src emacs-lisp
;; global
(use-package smartparens
  :init
  (require 'smartparens-config)
  (smartparens-global-mode t)
  ;; highlights matching pairs
  (show-smartparens-global-mode t))

#+end_src
** geiser
#+begin_src emacs-lisp
(setq geiser-racket-binary "/Applications/Racket v5.3.5/bin/racket")
#+end_src
** julia
#+begin_src emacs-lisp
;;(require 'julia-mode)
#+end_src
** haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :demand
  :init
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
(use-package flx)

(use-package company
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "M-TAB") 'next-line)
  :config
  (use-package company-quickhelp 
    :init  
    (company-quickhelp-mode 1))
  (use-package company-fuzzy 
    :init 
    (setq company-fuzzy-sorting-backend 'flx)
    (global-company-fuzzy-mode 1)))
#+END_SRC
** minimap
#+BEGIN_SRC emacs-lisp
(setq minimap-display-semantic-overlays nil)
(setq minimap-dedicated-window t)
(setq minimap-window-location 'right)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile 
  :init
  (projectile-global-mode))
#+END_SRC

#+RESULTS:
: t

** ido
#+BEGIN_SRC emacs-lisp :exports none
(setq ido-enable-flex-matching t)
;;(setq ido-everywhere t)
(setq ido-decorations
   (quote
    ("{" "}" ", " ", ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
;; (ido-mode 1)
;; (require 'flx-ido)
;; (ido-mode 1)
;; (ido-everywhere 1)
;; (flx-ido-mode 1)
;; ;; disable ido faces to see flx highlights.
;; (setq ido-enable-flex-matching t)
;; (setq ido-use-faces nil)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp :exports none
;; (use-package helm :demand
;; :init
;; (require 'helm)
;; (require 'helm-config)

;; ;; see https://github.com/emacs-helm/helm#fuzzy-matching
;; (setq helm-M-x-fuzzy-match t) 
;; (setq helm-buffers-fuzzy-matching t)
;; (setq helm-lisp-completion-at-point t)
;; (setq helm-buffers-fuzzy-matching t)
;; (setq helm-recentf-fuzzy-match t)
;; (setq helm-imenu-fuzzy-match t)

;; ;; http://emacs.stackexchange.com/questions/2867/how-should-i-change-my-workflow-when-moving-from-ido-to-helm
;; (global-set-key (kbd "C-x b")   #'helm-mini)
;; (global-set-key (kbd "C-x C-b") #'helm-buffers-list)
;; (global-set-key (kbd "M-x")     #'helm-M-x)
;; (global-set-key (kbd "C-x C-f") #'helm-find-files)
;; (global-set-key (kbd "C-x C-r") #'helm-recentf)
;; (global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
;; (global-set-key (kbd "M-y")     #'helm-show-kill-ring)
;; (global-set-key (kbd "M-s o")   #'helm-swoop)
;; (global-set-key (kbd "M-s /")   #'helm-multi-swoop)

;; (global-set-key (kbd "C-x c!")   #'helm-calcul-expression)
;; (global-set-key (kbd "C-x c:")   #'helm-eval-expression-with-eldoc)
;; ;; (define-key helm-map (kbd "M-o") #'helm-previous-source)

;; (global-set-key (kbd "M-s s")   #'helm-ag)

;; (autoload 'helm-descbinds      "helm-descbinds" t)
;; (autoload 'helm-eshell-history "helm-eshell"    t)
;; (autoload 'helm-esh-pcomplete  "helm-eshell"    t)

;; (global-set-key (kbd "C-h a")    #'helm-apropos)
;; (global-set-key (kbd "C-h i")    #'helm-info-emacs)
;; (global-set-key (kbd "C-h b")    #'helm-descbinds)

;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
;; (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

;; (add-hook 'eshell-mode-hook
;;           #'(lambda ()
;;               (define-key eshell-mode-map (kbd "TAB")     #'helm-esh-pcomplete)
;;               (define-key eshell-mode-map (kbd "C-c C-l") #'helm-eshell-history)))

;; (helm-mode t)
;; (helm-adaptive-mode t)
;; (helm-autoresize-mode t)
;; )
#+END_SRC

#+RESULTS:
: helm-buffers-list

** ivy
#+BEGIN_SRC emacs-lisp :exports code
(use-package counsel)

(use-package ivy
  :init
  (ivy-mode t)
  (counsel-mode t)
  
  (global-set-key (kbd "M-x") 'counsel-M-x)
  
  :config
  (setq ivy-use-virtual-buffers t
        ;; ivy-count-format "%d/%d "
        ivy-re-builders-alist '((t . ivy--regex-fuzzy))
        ivy-initial-inputs-alist nil))

#+END_SRC

** bury-successful-compilation
#+BEGIN_SRC emacs-lisp
(use-package bury-successful-compilation
:init
(bury-successful-compilation t)
)
#+END_SRC
** smart mode line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :init
  (sml/setup)
  (setq sml/theme nil)
  ;; (sml/apply-theme 'automatic)
  (setq sml/replacer-regexp-list '()) ;; clobber default replacements
  
  (add-to-list 'rm-blacklist " Helm")
  (add-to-list 'rm-blacklist " SP")
  (add-to-list 'rm-blacklist " company")
  (add-to-list 'rm-blacklist " ivy")
  (add-to-list 'rm-blacklist " counsel")
  (add-to-list 'rm-blacklist " ComFuz")
  )
#+END_SRC
** flyspell
#+begin_src emacs-lisp
(setq ispell-program-name "hunspell")
;; you could set `ispell-dictionary` instead but `ispell-local-dictionary' has higher priority
;;(setq ispell-hunspell-dict-paths-alist '("/opt/local/share/hunspell/"))
;;(setq ispell-local-dictionary "en_US")
;;(setenv "DICPATH" "/opt/local/share/hunspell")
(setq ispell-hunspell-dict-paths-alist
      '(("en_US" "/opt/local/share/hunspell/en_US.aff")))
;;(setq ispell-local-dictionary nil)
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
;;(with-eval-after-load "ispell"
  ;; without this I had errors like here, but I can't reproduce the now
(setenv "LANG" "en_US.UTF-8")
;;(ispell-set-spellchecker-params)
;;(ispell-hunspell-add-multi-dic "en_US")
;;(setq ispell-local-dictionary "en_US")

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

(use-package flyspell-correct
  :after flyspell
  :bind
  (:map flyspell-mode-map
        ("C-;" . flyspell-correct-wrapper)
        ("M-$" . flyspell-correct-at-point)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+end_src
** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode ("\\.qmd" . markdown-mode)
  :init
  (setq markdown-enable-math t)
  (setq markdown-asymmetric-header t)
  (setq markdown-header-scaling t)
  (setq markdown-marginalize-headers t)
  )
#+END_SRC
** vterm
#+begin_src emacs-lisp
(use-package vterm
  :hook
  (vterm-mode . disable-hl-line-mode-in-buffer)
  :config
  (defun disable-hl-line-mode-in-buffer()
    (setq-local global-hl-line-mode nil))
  )
#+end_src
* Hooks
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'c-mode-common-hook
               (lambda () (subword-mode 1)))
 
;; set eshell path
(defun read-lines (file)
  "Return a list of lines in FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (split-string
     (buffer-string) "\n" t)
    ))
 
(add-hook 'eshell-mode-hook
   '(lambda nil
   ;;(eshell/export "EDITOR=emacsclient -n")
(let ((path))
    (setq path (mapconcat 'identity (read-lines "/etc/paths") ":"))
    (setenv "PATH" path)
(setq eshell-path-env path)
 )))
#+end_src
* DocView
#+BEGIN_SRC emacs-lisp :results silent :exports code
(setq doc-view-resolution 300)
#+END_SRC
* LaTeX
#+BEGIN_SRC emacs-lisp :results silent :exports code

(add-hook 'LaTeX-mode-hook 'outline-minor-mode)
;;(eval-after-load 'tex-mode
;;  '(define-key latex-mode-map (kbd "<C-tab>") 'outline-toggle-children)) 



;; (use-package bicycle
;;   :after outline
;;   :bind (:map outline-minor-mode-map
;;               ([C-tab] . bicycle-cycle)
;;               ([S-tab] . bicycle-cycle-global)))

;; (eval-after-load 'outline
;;   '(progn
;;     (require 'outline-magic)
;;     (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))

;; (add-hook 'LaTeX-mode-hook #'latex-extra-mode)
;; (use-package latex-extra
;;   :ensure t
;;   :init
;;   ;;(add-hook 'LaTeX-mode-hook #'latex-extra-mode)
;;   )

(use-package lsp-latex
  :ensure t
  :config
  (setq lsp-latex-build-on-save t)
  (setq lsp-latex-build-args nil) ;;'("-xelatex" "-pdf" "-interaction=nonstopmode" "-synctex=1" "%f"))
;;   (setq lsp-latex-texlab-executable "~/.cargo/bin/texlab")
  :hook ((tex-mode . lsp)
         (latex-mode . lsp)
         (bibtex-mode . lsp))
  )

(use-package latex-extra
  :ensure t
  :hook (LaTeX-mode . latex-extra-mode))

#+END_SRC
* LSP
#+begin_src emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
(setq lsp-keymap-prefix "s-l")

(use-package lsp-mode
  :hook ((c-mode . lsp)
         (c++-mode . lsp)
         (swift-mode . lsp)
         (tex-mode . lsp)
         (latex-mode . lsp)
         (bibtex-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-clients-texlab-executable "~/.cargo/bin/texlab")
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)

;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)

;; if you are ivy user
;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

* Magit
  #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))
  #+end_src

* Lean
#+begin_src emacs-lisp
(use-package lean4-mode
  :commands lean4-mode
  :vc (:url "https://github.com/leanprover-community/lean4-mode.git"
       :rev :last-release
       ;; Or, if you prefer the bleeding edge version of Lean4-Mode:
       ;; :rev :newest
       ))
#+end_src
